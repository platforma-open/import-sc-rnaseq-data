self := import("@platforma-sdk/workflow-tengo:tpl")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")
pData := import("@platforma-sdk/workflow-tengo:pframes.data")
maps := import("@platforma-sdk/workflow-tengo:maps")
ll := import("@platforma-sdk/workflow-tengo:ll")
json := import("json")

self.defineOutputs("species", "geneFormat")

self.body(func(inputs) {
	inputData := inputs.input
	inputSpec := inputs.inputSpec
	importMode := string(inputs.importMode)

	fileExtension := inputSpec.domain["pl7.app/fileExtension"]

	// Check if input has role dimension (MTX format)
	hasRoleAxis := false
	if len(inputSpec.axesSpec) > 1 {
		for axis in inputSpec.axesSpec {
			if axis.name == "pl7.app/sc/cellRangerFileRole" {
				hasRoleAxis = true
				break
			}
		}
	}

	// Parse data with appropriate key length
	expectedKeyLength := 1
	if hasRoleAxis {
		expectedKeyLength = 2
	}
	parsedData := pData.parseData(inputData, { expectedKeyLength: expectedKeyLength })
	dataMap := parsedData.data

	// Get the file to analyze based on format
	fileToAnalyze := undefined
	
	if hasRoleAxis {
		// MTX format: need to get features file
		// Keys are [sample, role] format, find file with "features.tsv" role
		for sKey in maps.getKeys(dataMap) {
			key := json.decode(sKey)
			// Check if key has role dimension (second element) is "features.tsv"
			if len(key) == 2 && key[1] == "features.tsv" {
				fileToAnalyze = dataMap[sKey]
				break
			}
		}
		
		if is_undefined(fileToAnalyze) {
			ll.panic("Could not find features file in MTX input data")
		}
	} else {
		// CSV format: get first sample
		firstKey := maps.getKeys(dataMap)[0]
		fileToAnalyze = dataMap[firstKey]
	}

	// Determine file name and format based on import mode
	fileName := ""
	format := importMode
	
	if hasRoleAxis {
		// MTX format: use features file (may have .gz extension)
		// Get the actual file extension from the domain
		fileName = "features.tsv"
		compression := inputSpec.domain["pl7.app/compression"]
		if compression == "gz" {
			fileName = fileName + ".gz"
		}
	} else {
		// CSV format: use raw counts file
		fileName = "rawCounts." + fileExtension
	}

	inferSpeciesJob := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.import-sc-rnaseq-data.software:infer-species")).
		mem("16GiB").
		cpu(1).
		addFile(fileName, fileToAnalyze).
		arg(fileName).
		arg("--format").arg(format).
		saveFileContent("species.txt").
		saveFileContent("gene_format.txt").
		printErrStreamToStdout().
		run()

	return {
		species: inferSpeciesJob.getFileContent("species.txt"),
		geneFormat: inferSpeciesJob.getFileContent("gene_format.txt")
	}
})
