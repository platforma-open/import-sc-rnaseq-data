self := import("@platforma-sdk/workflow-tengo:tpl")

json := import("json")
ll := import("@platforma-sdk/workflow-tengo:ll")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")
maps := import("@platforma-sdk/workflow-tengo:maps")
pConstants := import("@platforma-sdk/workflow-tengo:pframes.constants")

geneMap := import(":libs.gene-map")



self.defineOutputs(
	"rawCountsCsv",
	"normCountsCsv",
	"cellMetricsCsv"
)

self.body(func(inputs) {
	inputData := inputs[pConstants.VALUE_FIELD_NAME]
	compressionLoaded := inputs.compression
	species := inputs.species
	fileExtension := inputs.fileExtension
	geneFormat := inputs.geneFormat
	importMode := string(inputs.importMode)

	inputDataMeta := inputData.getDataAsJson()

	fileFormat := ""
	if importMode == "mtx" {
		fileFormat = "mtx"
	} else if (importMode == "h5ad") {
		fileFormat = "h5ad"
	} else {
		fileFormat = "xsv"
	}

	inputMap := inputData.inputs()

	matrixFile := undefined
	barcodesFile := undefined
	featuresFile := undefined
	compression := ""

	if importMode == "mtx" {
		compression = compressionLoaded
		
		if len(maps.getKeys(inputMap)) != 3 {
			ll.panic("ERROR: Expected 3 files for MTX format, got %v", len(maps.getKeys(inputMap)))
		}
		
		// Get all keys from input map and decode them
		for sKey in maps.getKeys(inputMap) {
			key := json.decode(sKey)

			if key[0] == "barcodes.tsv" {
				barcodesFile = inputMap[sKey]
			} else if key[0] == "features.tsv" {
				featuresFile = inputMap[sKey]
			} else if key[0] == "matrix.mtx" {
				matrixFile = inputMap[sKey]
			}
		}
	}

	geneAsset := geneMap.getGeneAsset(species)
	geneAssetName := geneMap.getAssetName(species)

	mem := !is_undefined(inputs.mem) ? string(inputs.mem) + "GiB" : "64GB"
	cpu := !is_undefined(inputs.cpu) ? inputs.cpu : 16

	// @TODO: migrate to polars
	countMatrixCsv := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.import-sc-rnaseq-data.software:counts-csv")).
		mem(mem).
		cpu(cpu).
		arg("--format").arg(fileFormat)

	if fileFormat == "xsv" {
		// CSV format: get first sample
		firstKey := maps.getKeys(inputMap)[0]
		uniqueSampleData := inputMap[firstKey]
		
		countMatrixCsv = countMatrixCsv.
			addFile("inputCounts." + fileExtension, uniqueSampleData).
			arg("--xsv").arg("inputCounts." + fileExtension).
			arg("--gene-format").arg(geneFormat)

		if geneFormat == "gene symbol" {
			countMatrixCsv = countMatrixCsv.
				addAsset(geneAsset, ".", geneAssetName).
				arg("--annotation").arg(geneAssetName)
		}

	} else if fileFormat == "h5ad" {
		// H5AD format: get first sample
		firstKey := maps.getKeys(inputMap)[0]
		uniqueSampleData := inputMap[firstKey]

		countMatrixCsv = countMatrixCsv.
			addFile("inputCounts." + fileExtension, uniqueSampleData).
			arg("--h5ad").arg("inputCounts." + fileExtension)

	} else if fileFormat == "mtx" {
		// MTX format: use files extracted earlier
		matrixExt := compression == "gz" ? ".gz" : ""
		barcodesExt := compression == "gz" ? ".gz" : ""
		featuresExt := compression == "gz" ? ".gz" : ""
		
		countMatrixCsv = countMatrixCsv.
			addFile("matrix.mtx" + matrixExt, matrixFile).
			addFile("barcodes.tsv" + barcodesExt, barcodesFile).
			addFile("features.tsv" + featuresExt, featuresFile).
			arg("--matrix").arg("matrix.mtx" + matrixExt).
			arg("--barcodes").arg("barcodes.tsv" + barcodesExt).
			arg("--features").arg("features.tsv" + featuresExt)
	} else if fileFormat == "" {
		ll.panic("ERROR: Unsupported file format: %v", fileExtension)
	}
	
	countMatrixCsv = countMatrixCsv.
		arg("--output").arg("counts.csv").
		saveFile("counts.csv").
		saveFile("counts_normalized.csv").
		printErrStreamToStdout().
		run()

	rawCounts := countMatrixCsv.getFile("counts.csv")
	normCounts := countMatrixCsv.getFile("counts_normalized.csv")

	// Set default memory and CPU for imports
    defaultConvMem := "16GiB" // @TODO: set based on the size of the input
    defaultConvCpu := 1 // @TODO: set based on the size of the input
	
	cellMetricsCsv := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.import-sc-rnaseq-data.software:cell-metrics")).
		mem(mem).
		cpu(cpu)

	if fileFormat == "xsv" {
		cellMetricsCsv = cellMetricsCsv.
			arg("--format").arg("csv").
			addFile("rawCounts.csv", rawCounts).
			arg("--csv").arg("rawCounts.csv")
	} else if fileFormat == "h5ad" {
		// H5AD format: get first sample
		firstKey := maps.getKeys(inputMap)[0]
		uniqueSampleData := inputMap[firstKey]
		cellMetricsCsv = cellMetricsCsv.
			arg("--format").arg("h5ad").
			addFile("inputCounts." + fileExtension, uniqueSampleData).
			arg("--h5ad").arg("inputCounts." + fileExtension)
	} else if fileFormat == "mtx" {
		// MTX format: use files extracted earlier
		matrixExt := compression == "gz" ? ".gz" : ""
		barcodesExt := compression == "gz" ? ".gz" : ""
		featuresExt := compression == "gz" ? ".gz" : ""
		
		cellMetricsCsv = cellMetricsCsv.
			arg("--format").arg(fileFormat).
			addFile("matrix.mtx" + matrixExt, matrixFile).
			addFile("barcodes.tsv" + barcodesExt, barcodesFile).
			addFile("features.tsv" + featuresExt, featuresFile).
			arg("--matrix").arg("matrix.mtx" + matrixExt).
			arg("--barcodes").arg("barcodes.tsv" + barcodesExt).
			arg("--features").arg("features.tsv" + featuresExt)
	}
		
	cellMetricsCsv = cellMetricsCsv.
		arg("--species").arg(species).
		arg("--output").arg(".").
		saveFile("cell_metrics.csv").
		printErrStreamToStdout().
		run()

	filteredCellsCountsCsv := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.import-sc-rnaseq-data.software:filter-cells")).
		mem(mem).
		cpu(cpu).
		addFile("rawCounts.csv", rawCounts).
		addFile("rawCounts_normalized.csv", normCounts).
		addFile("cell_metrics.csv", cellMetricsCsv.getFile("cell_metrics.csv")).
		arg("--raw_counts").arg("rawCounts.csv").
		arg("--normalized_counts").arg("rawCounts_normalized.csv").
		arg("--metrics").arg("cell_metrics.csv").
		arg("--output_raw").arg("filtered_rawCounts.csv").
		arg("--output_normalized").arg("filtered_rawCounts_normalized.csv").
		saveFile("filtered_rawCounts.csv").
		saveFile("filtered_rawCounts_normalized.csv").
		printErrStreamToStdout().
		run()

	output := {
		rawCountsCsv: filteredCellsCountsCsv.getFile("filtered_rawCounts.csv"),
		normCountsCsv: filteredCellsCountsCsv.getFile("filtered_rawCounts_normalized.csv"),
		cellMetricsCsv: cellMetricsCsv.getFile("cell_metrics.csv")
	}

	return output

})
