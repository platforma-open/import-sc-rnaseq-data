self := import("@platforma-sdk/workflow-tengo:tpl")
assets := import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
pData := import("@platforma-sdk/workflow-tengo:pframes.data")
maps := import("@platforma-sdk/workflow-tengo:maps")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
render := import("@platforma-sdk/workflow-tengo:render")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")

targetOutputs := import(":libs.target-outputs")
pfSymbolsConv := import(":libs.pf-symbols-conv")
filteredCountsConv := import(":libs.filtered-counts-conv")
exportCountsConv := import(":libs.export-counts")
exportNormCountsConv := import(":libs.export-norm-counts")
resultsSummaryConv := import(":libs.results-summary-conv")

inferSpeciesTpl := assets.importTemplate(":infer-species")
importCountsTpl := assets.importTemplate(":import-counts")
filterGenesTpl := assets.importTemplate(":filter-genes")
resultsSummaryTpl := assets.importTemplate(":results-summary")
mapGenesTpl := assets.importTemplate(":map-genes")

self.awaitState("params", "ResourceReady")
self.awaitState("inputSpec", "ResourceReady")
self.awaitState("species", "ResourceReady")
self.awaitState("geneFormat", "ResourceReady")

self.body(func(inputs) {
	blockId := inputs.params.blockId
	species := string(inputs.species.getData())
	geneFormat := string(inputs.geneFormat.getData())
	importMode := string(inputs.importMode)

	inputSpec := inputs.inputSpec
	inputData := inputs.inputData

	fileExtension := inputSpec.domain["pl7.app/fileExtension"]

	importingCountsResults := pframes.processColumn(
		{ spec: inputSpec, data: inputData }, importCountsTpl,
		targetOutputs.getTargetOutputs(species, blockId, inputSpec.axesSpec[0]),
		{
			aggregate: [{
				name: "pl7.app/sampleId",
				optional: true
			}],

			traceSteps: [{type: "milaboratories.import-sc-rnaseq-data", id: blockId, importance: 20, label: "Import scRNA-seq Data"}],

			extra: {
				species: species,
				fileExtension: fileExtension,
				geneFormat: geneFormat,
				importMode: importMode			}
			// ,
			// metaExtra: {
			// 	mem: inputs.params.mem,
			// 	cpu: inputs.params.cpu
			// }
		}
	)

	cellMetricsPf := importingCountsResults.xsvOutputFrame("cellMetrics")

	csvCounts := xsv.exportFrame({
		"rawCounts.spec": importingCountsResults.outputSpec("rawCounts", "rawCounts"),
		"rawCounts.data": importingCountsResults.outputData("rawCounts", "rawCounts")
	}, "csv", { mem: "16GiB", cpu: 1 })
	csvCountsNormalized := xsv.exportFrame({
		"normCounts.spec": importingCountsResults.outputSpec("normCounts", "normCounts"),
		"normCounts.data": importingCountsResults.outputData("normCounts", "normCounts")
	}, "csv", { mem: "16GiB", cpu: 1 })

	// Filter genes
	filteredGenesResults := render.create(filterGenesTpl, {
		csvCounts: csvCounts,
		normCounts: csvCountsNormalized
	})

	filteredGenesCountsCsv := filteredGenesResults.output("filteredGenesCountsCsv")
	filteredGenesNormalizedCountsCsv := filteredGenesResults.output("filteredGenesNormalizedCountsCsv")

	countCsvParams := filteredCountsConv.getRawColumns(blockId, species, inputSpec)
	filteredRawCountsPf := xsv.importFile(filteredGenesCountsCsv, "csv", countCsvParams, { mem: "16GiB", cpu: 1 })

	normCountCsvParams := filteredCountsConv.getNormColumns(blockId, species, inputSpec)
	filteredNormCountsPf := xsv.importFile(filteredGenesNormalizedCountsCsv, "csv", normCountCsvParams, { mem: "16GiB", cpu: 1 })


	// Summary table

	resultsSummary := render.create(resultsSummaryTpl, {
		filteredGenesCountsCsv: filteredGenesCountsCsv
	})

	resultsSummaryCsv := resultsSummary.output("resultsSummaryCsv")
	resultsSummaryConvParams := resultsSummaryConv.getColumns(blockId, species, inputSpec)
	resultsSummaryPf := xsv.importFile(resultsSummaryCsv, "csv", resultsSummaryConvParams, { mem: "16GiB", cpu: 1 })

	// // Highly Variable Genes calculation
	// hvgResults := render.create(hvgTpl, {
	// 	csvCounts: filteredGenesCountsCsv,
	// 	normCounts: filteredGenesNormalizedCountsCsv
	// })

	// hvgCountsCsv := hvgResults.output("hvgCountsCsv")
	// hvgNormalizedCountsCsv := hvgResults.output("hvgNormalizedCountsCsv")

	// // Convert to pFrames
	// hvgCountsPf := xsv.importFile(hvgCountsCsv, "csv", countCsvParams, { mem: "16GiB", cpu: 1 })
	// hvgNormCountsPf := xsv.importFile(hvgNormalizedCountsCsv, "csv", normCountCsvParams, { mem: "16GiB", cpu: 1 })

	mapGenesResults := render.create(mapGenesTpl, {
		filteredGenesCountsCsv: filteredGenesCountsCsv,
		species: species
	})

	geneSymbolsCsv := mapGenesResults.output("geneSymbolsCsv")

	geneSymbolsImportParams := pfSymbolsConv.getColumns(species)
	geneSymbolsPf := xsv.importFile(geneSymbolsCsv, "csv", geneSymbolsImportParams, { mem: "16GiB", cpu: 1 })

	trace := pSpec.makeTrace(inputSpec,
		{type: "milaboratories.import-sc-rnaseq-data", id: blockId, importance: 20, label: "Import scRNA-seq Data"}// + genomes.getSpeciesName(species)}
	)

	// Count matrix export defined with sample from inputSpec + previous specs
	sampleAxisSpec := copy(inputSpec.axesSpec[0])

	exportPfBuilder := pframes.pFrameBuilder()
	exportPfBuilder.add("rawCount", trace.inject(exportCountsConv.getSpecs(blockId, species, sampleAxisSpec)), filteredRawCountsPf["rawCounts.data"])
	exportPfBuilder.add("normCount", trace.inject(exportNormCountsConv.getSpecs(blockId, species, sampleAxisSpec)), filteredNormCountsPf["normCounts.data"])
	// exportPfBuilder.add("rawHvgCount", trace.inject(exportCountsConv.getSpecs(blockId, species, sampleAxisSpec)), hvgCountsPf["rawCounts.data"])
	// exportPfBuilder.add("normHvgCount", trace.inject(exportNormCountsConv.getSpecs(blockId, species, sampleAxisSpec)), hvgNormCountsPf["normCounts.data"])
	exportPfBuilder.add("geneSymbols", geneSymbolsPf["geneSymbol.spec"], geneSymbolsPf["geneSymbol.data"])


	return {
		exports: exportPfBuilder.build(),
		cellMetricsPf: cellMetricsPf,
		rawCountsPf: filteredRawCountsPf,
		resultsSummaryPf: resultsSummaryPf
	}
})
